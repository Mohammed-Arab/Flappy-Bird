/*	Group Student Name: Khanh Le, Mohammed Arab
    Student Email: kle6951@mtroyal.ca, marab@mtroyal.ca
    File Name: Model.h
    Instructor: Paul Pospisil
    Assignment: Flappy Bird - Stage 3
    Previous Update: March 17th, 2023
    Recent Update: April 5th, 2023
*/
#ifndef model_h
#define model_h

#include <stdio.h>
#include "types.h"
#include "font.h"
#include <linea.h>
#include <osbind.h>
#include <time.h>
#include <stdlib.h>
#include "effect.h" 
#include "isr.h"
#include "raster.h"

#define MIN_BIRD_LOCATION 0 /* minimum x position within 32x32 bitmap*/
#define MAX_BIRD_LOCATION 338
/* the maximum x position that the bird is allowed to continue falling */
#define BIRD_X_POSITION 11 /* the x positon of the bird in the game */
#define SPACE_KEY ' '      /* Main input of the game*/
#define SPACE 0x00390020    /*scancode for space key*/
#define STRIKE 10          /* strike whenever the players earn points 10 times*/
#define PIPE_SPEED 17

/* Score struct defines the score and the properties
of the score: the actual score, fixed y coordinate for all
the digits and letters, the initial x position of "SCORE", the
earned point, the x positon of each digit, thousandth digit,
hundredth digit, tenth digit and oneth digi and score counter
for strike detection*/
typedef struct
{
    const unsigned int score_x_pos; /* position coordinate*/
    const unsigned int fixed_y_pos;
    unsigned int score;
    unsigned int earned_score;
    const unsigned int thousandth_x_pos;
    const unsigned int hundredth_x_pos;
    const unsigned int tenth_x_pos;
    const unsigned int oneth_x_pos;
    unsigned int thousandth_digit;
    unsigned int hundredth_digit;
    unsigned int tenth_digit;
    unsigned int oneth_digit;
    unsigned int score_counter;
} Score;

/*Bird struct defines the bird of the game with its
properties: fixed x position, the y position, old y
position, whether the bird is alive or not, velocity
of the bird, gravity acts on the bird
*/
typedef struct
{
    const unsigned int x_pos; /* fixed x position*/
    unsigned int y_pos;       /* y position coordinate*/
    unsigned int old_y_pos;   /* old y position */
    unsigned int alive;       /* 1 = alive otherwise 0 = die*/
    int velocity;             /* Bird's vertical velocity*/
    unsigned int gravity;
    /* Gravity (ie: reducing # of pixels) acts on the bird
    Restrictions: Cannot be negative*/
} Bird;
/*
Pipe struct contains UINT16 x, and UINT16 start_gap.
x is the postition where the pipe will start ploting.
start_gap is where the gap will be from.
*/
typedef struct
{
    UINT16 x;
    UINT16 start_gap;
} Pipe;


/*  Function name: bird_falls
    Inputs: Bird *bird
    Output: None
    Function details: The function performs
    calculating the new vertex of the bird
    when it falls by applying the value of 
    the bird velocity to its current vertex
*/
void bird_falls(Bird *bird);

/*  Function name: score_detection
    Input: Bird *bird
           Pipe *pipe
    Output: int score_dection: 1 if detecting the player can earn a score,
                               otherwise, 0 is returned
    Function details: The function detects when the bird gets to be in the
    gap between the top and bottom bird, then the player can earn point(s).
*/
int score_detection(Bird *bird, Pipe *pipe);

/*  Function name: strike_detection
    Input: Score *score
    Output: int strike detection: 1 if detecting the player has a strike,
                                  otherwise 0 is returned
    Function details: The function detects when the player earns point(s)
    10 times.
*/
int strike_detection(Score *score);

/* Function name: initialize_bird
   Input: Bird *bird
          unsigned int y_pos
          unsigned int gravity
    Output: None
    Function details: The function initialize all the
    properties of the bird. Only the y position and
    the gravity are determined by the caller
*/
void initialize_bird(Bird *bird, unsigned int y_pos, unsigned int gravity);

/*  Function name: init_pipes
    Input: Pipe *pipe
    Output: None
    Function details:
Initializes an array of pipes with random start gaps and given x positions.

An array of Pipe structs to be initialized

The number of pipes in the array

The pipes array will be initialized with x positions starting at 180 and incrementing by 180
with each subsequent Pipe struct, and random start gaps generated by the random_int function.
*/
void init_pipes(Pipe *pipe);

/*  Function name: random_int
    Input: None
    Output: a random integer between 30 and 223.
    Function details: Generates a random integer between 30
and 223 (inclusive).
*/
int random_int();

/*
    Function Name: update_pipes
    Input: Pipe *pipe
           int pipe_speed
pipes[]: An array of Pipe structures representing the pipes in the game.
num_pipes: An integer representing the number of pipes in the array.
pipe_speed: An integer representing the speed of the pipes in the game.
    Output: None
    Function Details:
This function updates the position of the pipes in the pipes array.
It takes in the pipes array, the number of pipes in the array and
the speed of the pipes as input arguments.
*/
void update_pipes(Pipe *pipe, int pipe_speed);

/*  Function name: update_bird
    Input: Bird *bird
           UINT32 input
    Output: None
    Function details: The function updates the y position of
    the bird upward if the player hits space bar, otherwise
    the y position of the bird is updated downward

*/
void update_bird(Bird *bird, UINT32 input);


/*  Function name: update_score
    Input: Score *player_score
           int strike
    Output: None
    Function details: While the bird is alive, the
    function updates the score if the bird sucessfully
    passes a pair of pipe.  When there is a strike,
    the earned point is double and added to the total
    score
*/
void update_score(Score *player_score, int strike);

/*  Function name: extract_score
    Input: Score *player_score
    Output: None
    Function details: The function extracts each digit from the
    score and store it in the thousandth_digit, hundredth_digit,
    tenth_digit, oneth_digit data member of the score instance.
*/
void extract_score(Score *player_score);

/*  Function name: check_collision
    Input: Bird *bird
           Pipe *pipe
    Output: int
    Function details: The function perform boundary checking
    to check all the possible collision between the bird and
    the pipes, and between the bird and the ground. If the
    collision is detect, 1(ie: true) is returned, otherwise
    0(ie: false) is returned.
*/
int check_collision(Bird *bird, Pipe *pipe);


#endif